---
version: 2.1

orbs:
  terraform: twdps/terraform@0.6.0
  kube: twdps/kube-ops@0.3.0
  op: twdps/onepassword@1.0.0
  do: twdps/pipeline-events@0.1.0

# ==== global pipeline parameters

parameters:
  context:
    description: circleci context for all jobs
    type: string
    default: cohorts-global
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.3.3"
  executor-image:
    description: image to use for local jobs
    type: string
    default: twdps/circleci-kube-ops:alpine-edge

# ==== triggers

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:
  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster environment
        type: string
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    steps:
      - op/env:
          env-file: << parameters.source-env >>
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: |
            op inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json

  set-kubeconfig:
    parameters:
      cluster:
        description: cluster to configure
        type: string
    steps:
      - run:
          name: setup kubeconfig
          command: |
            mkdir -p ~/.kube
            ENV=<< parameters.cluster >> op inject -i tpl/kubeconfig.tpl -o ~/.kube/config

jobs:
  deploy-core-services:
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << parameters.shell >>
    parameters:
      cluster:
        description: cluster to configure
        type: string
      shell:
        description: shell option directive
        type: string
        default: /bin/bash -eo pipefail
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - kube/packages:
          terraform-version: << pipeline.parameters.terraform-version >>
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: deploy metrics-server
          command: bash scripts/deploy_metrics_server.sh << parameters.cluster >>
      - run:
          name: deploy kube-state-metrics
          command: bash scripts/deploy_kube_state_metrics.sh << parameters.cluster >>
      - run:
          name: deploy cluster-autoscaler
          command: bash scripts/deploy_cluster_autoscaler.sh << parameters.cluster >>

      - run:
          name: deploy pixie labs
          command: bash scripts/deploy_pixie.sh << parameters.cluster >>

      - run:
          name: deploy flagger
          command: bash scripts/deploy_flagger.sh

      - run:
          name: deploy k6
          command: bash scripts/deploy_k6.sh

      # the provision of the efes location is commented out pending correction of above
      - run:
          name: deploy core-services-resources
          command: bash scripts/deploy_core_service_resources.sh << parameters.cluster >>

  validate-core-services:
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << parameters.shell >>
    parameters:
      cluster:
        description: cluster to configure
        type: string
      shell:
        description: shell option directive
        type: string
        default: /bin/bash -eo pipefail
      source-env:
        description: .env file to source into BASH_ENV
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - kube/packages:
          terraform-version: << pipeline.parameters.terraform-version >>
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: smoketest core services
          command: bash scripts/validate_core_services.sh << parameters.cluster >>

workflows:
  version: 2

  deploy nonprod-ap-southeast-2 core services:
    jobs:
      - terraform/apply:
          name: create nonprod-ap-southeast-2 core service irsa roles
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod-ap-southeast-2
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: nonprod-ap-southeast-2
                source-env: op.nonprod.env
          filters: *on-push-main

      - deploy-core-services:
          name: deploy nonprod-ap-southeast-2 core-services
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          source-env: op.nonprod.env
          cluster: nonprod-ap-southeast-2
          requires:
            - create nonprod-ap-southeast-2 core service irsa roles
          filters: *on-push-main

      - validate-core-services:
          name: validate nonprod-ap-southeast-2 core services
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          source-env: op.nonprod.env
          cluster: nonprod-ap-southeast-2
          requires:
            - deploy nonprod-ap-southeast-2 core-services
          filters: *on-push-main

  nightly-validation:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - validate-core-services:
          name: validate nonprod-ap-southeast-2
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          source-env: op.nonprod.env
          cluster: nonprod-ap-southeast-2
